2023-05-25 22:05:42:613 grammar LogManager.java:25 before: (COMBINED_GRAMMAR teste (RULES (RULE DEC (BLOCK (ALT 'DECLARATIONS'))) (RULE ALG (BLOCK (ALT 'ALGORITHM'))) (RULE TYPE (BLOCK (ALT 'INT') (ALT 'FLOAT') (ALT 'STRING') (ALT 'BOOL'))) (RULE IN (BLOCK (ALT 'JACKIN'))) (RULE OUT (BLOCK (ALT 'JACKOUT'))) (RULE ATR (BLOCK (ALT '<-'))) (RULE ONEPIECE (BLOCK (ALT '('))) (RULE CP (BLOCK (ALT ')'))) (RULE OB (BLOCK (ALT '{'))) (RULE CB (BLOCK (ALT '}'))) (RULE VAR (BLOCK (ALT [a-z] (* (BLOCK (ALT DIGIT) (ALT LETTER)))))) (RULE NUM (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT DIGIT))))))))) (RULE STR (BLOCK (ALT '"' (+ (BLOCK (ALT LETTER))) '"'))) (RULE DELIM (BLOCK (ALT ';'))) (RULE COMMA (BLOCK (ALT ','))) (RULE OP_ARIT (BLOCK (ALT '+') (ALT '-') (ALT '*') (ALT '/'))) (RULE OP_COMP (BLOCK (ALT '=') (ALT '<') (ALT '<=') (ALT '>') (ALT '>=') (ALT '!='))) (RULE OP_LOGI (BLOCK (ALT '&&') (ALT '||') (ALT '!'))) (RULE COND (BLOCK (ALT 'IF') (ALT 'ELSE') (ALT 'ELSE IF'))) (RULE RTN (BLOCK (ALT 'RETURN'))) (RULE FUNC (BLOCK (ALT 'FUNCTION'))) (RULE NFUNC (BLOCK (ALT '_' (+ (BLOCK (ALT DIGIT) (ALT LETTER)))))) (RULE LETTER (RULEMODIFIERS fragment) (BLOCK (ALT [a-zA-Z]))) (RULE DIGIT (RULEMODIFIERS fragment) (BLOCK (ALT [0-9]))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (* (BLOCK (ALT [ \r\t\n])))) skip))) (RULE ErrorChar (BLOCK (ALT .)))))
2023-05-25 22:05:42:652 grammar LogManager.java:25 after: (COMBINED_GRAMMAR teste (RULES (RULE DEC (BLOCK (ALT 'DECLARATIONS'))) (RULE ALG (BLOCK (ALT 'ALGORITHM'))) (RULE TYPE (BLOCK (ALT 'INT') (ALT 'FLOAT') (ALT 'STRING') (ALT 'BOOL'))) (RULE IN (BLOCK (ALT 'JACKIN'))) (RULE OUT (BLOCK (ALT 'JACKOUT'))) (RULE ATR (BLOCK (ALT '<-'))) (RULE ONEPIECE (BLOCK (ALT '('))) (RULE CP (BLOCK (ALT ')'))) (RULE OB (BLOCK (ALT '{'))) (RULE CB (BLOCK (ALT '}'))) (RULE VAR (BLOCK (ALT [a-z] (* (BLOCK (ALT DIGIT) (ALT LETTER)))))) (RULE NUM (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT DIGIT))))))))) (RULE STR (BLOCK (ALT '"' (+ (BLOCK (ALT LETTER))) '"'))) (RULE DELIM (BLOCK (ALT ';'))) (RULE COMMA (BLOCK (ALT ','))) (RULE OP_ARIT (BLOCK (ALT (SET '+' '-' '*' '/')))) (RULE OP_COMP (BLOCK (ALT '=') (ALT '<') (ALT '<=') (ALT '>') (ALT '>=') (ALT '!='))) (RULE OP_LOGI (BLOCK (ALT '&&') (ALT '||') (ALT '!'))) (RULE COND (BLOCK (ALT 'IF') (ALT 'ELSE') (ALT 'ELSE IF'))) (RULE RTN (BLOCK (ALT 'RETURN'))) (RULE FUNC (BLOCK (ALT 'FUNCTION'))) (RULE NFUNC (BLOCK (ALT '_' (+ (BLOCK (ALT DIGIT) (ALT LETTER)))))) (RULE LETTER (RULEMODIFIERS fragment) (BLOCK (ALT [a-zA-Z]))) (RULE DIGIT (RULEMODIFIERS fragment) (BLOCK (ALT [0-9]))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (* (BLOCK (ALT [ \r\t\n])))) skip))) (RULE ErrorChar (BLOCK (ALT .)))))
2023-05-25 22:05:42:698 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR teste RULES)
2023-05-25 22:05:42:698 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR testeLexer (RULES (RULE DEC (BLOCK (ALT 'DECLARATIONS'))) (RULE ALG (BLOCK (ALT 'ALGORITHM'))) (RULE TYPE (BLOCK (ALT 'INT') (ALT 'FLOAT') (ALT 'STRING') (ALT 'BOOL'))) (RULE IN (BLOCK (ALT 'JACKIN'))) (RULE OUT (BLOCK (ALT 'JACKOUT'))) (RULE ATR (BLOCK (ALT '<-'))) (RULE ONEPIECE (BLOCK (ALT '('))) (RULE CP (BLOCK (ALT ')'))) (RULE OB (BLOCK (ALT '{'))) (RULE CB (BLOCK (ALT '}'))) (RULE VAR (BLOCK (ALT [a-z] (* (BLOCK (ALT DIGIT) (ALT LETTER)))))) (RULE NUM (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT DIGIT))))))))) (RULE STR (BLOCK (ALT '"' (+ (BLOCK (ALT LETTER))) '"'))) (RULE DELIM (BLOCK (ALT ';'))) (RULE COMMA (BLOCK (ALT ','))) (RULE OP_ARIT (BLOCK (ALT (SET '+' '-' '*' '/')))) (RULE OP_COMP (BLOCK (ALT '=') (ALT '<') (ALT '<=') (ALT '>') (ALT '>=') (ALT '!='))) (RULE OP_LOGI (BLOCK (ALT '&&') (ALT '||') (ALT '!'))) (RULE COND (BLOCK (ALT 'IF') (ALT 'ELSE') (ALT 'ELSE IF'))) (RULE RTN (BLOCK (ALT 'RETURN'))) (RULE FUNC (BLOCK (ALT 'FUNCTION'))) (RULE NFUNC (BLOCK (ALT '_' (+ (BLOCK (ALT DIGIT) (ALT LETTER)))))) (RULE LETTER (RULEMODIFIERS fragment) (BLOCK (ALT [a-zA-Z]))) (RULE DIGIT (RULEMODIFIERS fragment) (BLOCK (ALT [0-9]))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (* (BLOCK (ALT [ \r\t\n])))) skip))) (RULE ErrorChar (BLOCK (ALT .)))))
